version: '3.3'
services:
  kafka:
    image: 'bitnami/kafka:3.6'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LOG4J_LOGGERS="kafka.controller=WARN,kafka.request.logger=WARN"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "kafka:9092",
          "--topic",
          "WikiUpdates3",
          "--describe"
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-init:
    image: bitnami/kafka:3.6
    container_name: kafka_init
    command: [ "/bin/bash", "-c", "/create-topic.sh" ]
    environment:
      - TEST_TOPIC_NAME=WikiUpdates3
    volumes:
      - type: bind
        source: ./bin/create-topic.sh
        target: /create-topic.sh
    init: true

  producer:
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    build:
      context: .
      dockerfile: producer/Dockerfile
    container_name: producer
    ports:
      - 7071:80
    restart: on-failure

  spark:
    image: docker.io/bitnami/spark:3.3.0
    container_name: spark_master
    hostname: spark_master
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'

  spark-consumer:
    image: docker.io/bitnami/spark:3.3.0
    container_name: spark-consumer
    command: [ "/bin/bash", "-c", "/spark-setup.sh" ]
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./bin/spark-setup.sh
        target: /spark-setup.sh
      - ./consumer:/home/scripts

  cassandra:
    image: cassandra:4
    container_name: cassandra
    hostname: cassandra
    healthcheck:
      test: cqlsh -u cassandra -p cassandra -k wiki_updates_ks
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - '9042:9042'

  cassandra-create-ks-topic:
    image: cassandra:4
    container_name: cassandra-create-ks-topic
    restart: "no"
    entrypoint: [ "/cassandra-init.sh" ]
    volumes:
      - ./bin/cassandra-init.sh:/cassandra-init.sh
